// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  firstName String?
  lastName  String?
  password  String
  role      UserRole @default(VIEWER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdProducts Product[] @relation("ProductCreatedBy")
  assignedTasks   Task[]
  auditLogs       AuditLog[]
  assets          Asset[]    @relation("AssetCreatedBy")
  workflows       Workflow[] @relation("WorkflowCreatedBy")

  @@map("users")
}

enum UserRole {
  ADMIN
  DATA_STEWARD
  MARKETING
  VIEWER
}

model Product {
  id                String            @id @default(cuid())
  sku               String            @unique
  name              String
  nameEn            String?
  description       String?
  descriptionEn     String?
  category          String
  brand             String
  manufacturer      String
  price             Decimal?
  currency          String            @default("EUR")
  weight            Decimal?
  dimensions        Json? // {length, width, height}
  specifications    Json? // Technical specs
  compatibility     String[] // Compatible vehicle models
  tecDocId          String?
  acesId            String?
  piesId            String?
  status            ProductStatus     @default(DRAFT)
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  publishedAt       DateTime?
  createdById       String
  
  // Relations
  createdBy         User              @relation("ProductCreatedBy", fields: [createdById], references: [id])
  assets            ProductAsset[]
  exportLogs        ExportLog[]
  workflowItems     WorkflowItem[]
  translations      ProductTranslation[]
  
  @@map("products")
}

enum ProductStatus {
  DRAFT
  REVIEW
  APPROVED
  PUBLISHED
  ARCHIVED
}

model ProductTranslation {
  id          String @id @default(cuid())
  productId   String
  language    String
  name        String
  description String?
  
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([productId, language])
  @@map("product_translations")
}

model Asset {
  id          String      @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        BigInt
  path        String
  url         String?
  alt         String?
  altEn       String?
  tags        String[]
  metadata    Json? // EXIF, dimensions, etc.
  checksum    String
  type        AssetType
  status      AssetStatus @default(UPLOADED)
  isPublic    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdById String
  
  // Relations
  createdBy     User           @relation("AssetCreatedBy", fields: [createdById], references: [id])
  products      ProductAsset[]
  workflowItems WorkflowItem[]
  
  @@map("assets")
}

enum AssetType {
  IMAGE
  VIDEO
  DOCUMENT
  MODEL_3D
  BROCHURE
  MANUAL
  CERTIFICATE
}

enum AssetStatus {
  UPLOADED
  PROCESSING
  APPROVED
  REJECTED
  ARCHIVED
}

model ProductAsset {
  id        String @id @default(cuid())
  productId String
  assetId   String
  type      String // "main", "gallery", "manual", "certificate"
  order     Int    @default(0)
  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  asset     Asset   @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  @@unique([productId, assetId])
  @@map("product_assets")
}

model Workflow {
  id          String         @id @default(cuid())
  name        String
  description String?
  type        WorkflowType
  status      WorkflowStatus @default(ACTIVE)
  steps       Json // Workflow definition
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  createdById String
  
  // Relations
  createdBy User           @relation("WorkflowCreatedBy", fields: [createdById], references: [id])
  items     WorkflowItem[]
  
  @@map("workflows")
}

enum WorkflowType {
  PRODUCT_IMPORT
  ASSET_APPROVAL
  EXPORT_PROCESS
  DATA_VALIDATION
}

enum WorkflowStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

model WorkflowItem {
  id           String              @id @default(cuid())
  workflowId   String
  productId    String?
  assetId      String?
  currentStep  Int                 @default(0)
  status       WorkflowItemStatus  @default(PENDING)
  data         Json? // Context data
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  completedAt  DateTime?
  
  // Relations
  workflow     Workflow            @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  product      Product?            @relation(fields: [productId], references: [id])
  asset        Asset?              @relation(fields: [assetId], references: [id])
  tasks        Task[]
  
  @@map("workflow_items")
}

enum WorkflowItemStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

model Task {
  id               String     @id @default(cuid())
  title            String
  description      String?
  type             TaskType
  priority         TaskPriority @default(MEDIUM)
  status           TaskStatus @default(TODO)
  assignedToId     String?
  workflowItemId   String?
  dueDate          DateTime?
  completedAt      DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  
  // Relations
  assignedTo       User?        @relation(fields: [assignedToId], references: [id])
  workflowItem     WorkflowItem? @relation(fields: [workflowItemId], references: [id])
  
  @@map("tasks")
}

enum TaskType {
  DATA_VALIDATION
  CONTENT_REVIEW
  ASSET_APPROVAL
  EXPORT_VERIFICATION
  SYSTEM_MAINTENANCE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

model ExportLog {
  id          String       @id @default(cuid())
  productId   String?
  type        ExportType
  destination String
  format      String
  status      ExportStatus @default(PENDING)
  data        Json? // Export configuration
  result      Json? // Export result/error
  createdAt   DateTime     @default(now())
  completedAt DateTime?
  
  // Relations
  product     Product?     @relation(fields: [productId], references: [id])
  
  @@map("export_logs")
}

enum ExportType {
  PRODUCT_CATALOG
  PRICE_LIST
  TECDOC_XML
  ACES_PIES
  SHOP_FEED
  ERP_SYNC
}

enum ExportStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  resource  String
  resourceId String?
  oldData   Json?
  newData   Json?
  metadata  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  
  @@map("audit_logs")
}

model BrandBoard {
  id          String   @id @default(cuid())
  name        String
  description String?
  logoUrl     String?
  colors      Json? // Brand colors
  fonts       Json? // Typography
  templates   Json? // Layout templates
  guidelines  Json? // Brand guidelines
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("brand_boards")
}