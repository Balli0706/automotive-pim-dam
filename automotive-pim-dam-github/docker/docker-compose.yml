version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: automotive-pim-postgres
    environment:
      POSTGRES_DB: automotive_pim_dam
      POSTGRES_USER: pim_user
      POSTGRES_PASSWORD: pim_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - automotive-network

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: automotive-pim-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - automotive-network

  # MinIO Object Storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: automotive-pim-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - automotive-network

  # Elasticsearch for Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: automotive-pim-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - automotive-network

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: automotive-pim-backend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://pim_user:pim_password@postgres:5432/automotive_pim_dam
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      ELASTICSEARCH_URL: http://elasticsearch:9200
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      PORT: 3000
    depends_on:
      - postgres
      - redis
      - minio
      - elasticsearch
    volumes:
      - ../backend:/app
      - /app/node_modules
    networks:
      - automotive-network

  # Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: automotive-pim-frontend
    ports:
      - "3001:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3000/api/v1
      NEXT_PUBLIC_WS_URL: ws://localhost:3000
    depends_on:
      - backend
    volumes:
      - ../frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - automotive-network

  # AI Services
  ai-services:
    build:
      context: ../ai-services
      dockerfile: Dockerfile
    container_name: automotive-pim-ai
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://pim_user:pim_password@postgres:5432/automotive_pim_dam
      REDIS_URL: redis://redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - ../ai-services:/app
      - ai_models:/app/models
    networks:
      - automotive-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: automotive-pim-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - automotive-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: automotive-pim-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - automotive-network

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: automotive-pim-grafana
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - automotive-network

volumes:
  postgres_data:
  redis_data:
  minio_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  ai_models:

networks:
  automotive-network:
    driver: bridge